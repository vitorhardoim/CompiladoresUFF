import unittest
from predparsing import Grammar
from slr import *

class TestSlrParsing(unittest.TestCase):
    def setUp(self):
        p = {"E" : [("E", "+", "T"), tuple("T")],
             "T" : [("T", "*", "F"), tuple("F")],
             "F" : [("(", "E", ")"), ("id",)]}
        self.g = Grammar("E", p, ["E", "T", "F"],
                         ["+", "*", "(", ")", "id"])

    def test_closure(self):
        self.assertEqual(closure({("E'", "E", 0)}, self.g), 
                         {("E'", 'E', 0), 
                          ('T', ('F',), 0), 
                          ('F', ('(', 'E', ')'), 0), 
                          ('F', ('id',), 0), 
                          ('E', ('E', '+', 'T'), 0), 
                          ('T', ('T', '*', 'F'), 0), 
                          ('E', ('T',), 0)})

    def test_goto(self):
        self.assertEqual(
            goto({("E'", "E", 1), ("E", ("E","+","T"), 1)}, "+", self.g),
                 {('T', ('F',), 0),
                  ('E', ('E', '+', 'T'), 2),
                  ('F', ('id',), 0),
                  ('F', ('(', 'E', ')'), 0),
                  ('T', ('T', '*', 'F'), 0)})

    def test_canonical_items(self):
        augment(self.g)
        self.assertEqual(canonical_items(self.g),
                         [{('E', ('E', '+', 'T'), 0),
                           ('E', ('T',), 0),
                           ("E'", 'E', 0),
                           ('F', ('(', 'E', ')'), 0),
                           ('F', ('id',), 0),
                           ('T', ('F',), 0),
                           ('T', ('T', '*', 'F'), 0)},
                          {("E'", 'E', 1), ('E', ('E', '+', 'T'), 1)},
                          {('E', ('T',), 1), ('T', ('T', '*', 'F'), 1)},
                          {('T', ('F',), 1)},
                          {('E', ('E', '+', 'T'), 0),
                           ('E', ('T',), 0),
                           ('F', ('(', 'E', ')'), 0),
                           ('F', ('(', 'E', ')'), 1),
                           ('F', ('id',), 0),
                           ('T', ('F',), 0),
                           ('T', ('T', '*', 'F'), 0)},
                          {('F', ('id',), 1)},
                          {('E', ('E', '+', 'T'), 2),
                           ('F', ('(', 'E', ')'), 0),
                           ('F', ('id',), 0),
                           ('T', ('F',), 0),
                           ('T', ('T', '*', 'F'), 0)},
                          {('T', ('T', '*', 'F'), 2),
                           ('F', ('id',), 0), ('F', ('(', 'E', ')'), 0)},
                          {('E', ('E', '+', 'T'), 1),
                           ('F', ('(', 'E', ')'), 2)},
                          {('E', ('E', '+', 'T'), 3),
                           ('T', ('T', '*', 'F'), 1)},
                          {('T', ('T', '*', 'F'), 3)},
                          {('F', ('(', 'E', ')'), 3)}])
    def test_slr_parsing_table(self):
        augment(self.g)
        self.g.compute_first()
        self.g.compute_follow()
        act_tb, goto_tb = slr_parsing_table(self.g)
        self.assertEqual(act_tb,
                         {0: {'$': [],
                              '(': [('shift', 4)],
                              ')': [],
                              '*': [],
                              '+': [],
                              'id': [('shift', 5)]},
                          1: {'$': [('accept',)],
                              '(': [],
                              ')': [],
                              '*': [],
                              '+': [('shift', 6)],
                              'id': []},
                          2: {'$': [('reduce', ('E', ('T',)))],
                              '(': [],
                              ')': [('reduce', ('E', ('T',)))],
                              '*': [('shift', 7)],
                              '+': [('reduce', ('E', ('T',)))],
                              'id': []},
                          3: {'$': [('reduce', ('T', ('F',)))],
                              '(': [],
                              ')': [('reduce', ('T', ('F',)))],
                              '*': [('reduce', ('T', ('F',)))],
                              '+': [('reduce', ('T', ('F',)))],
                              'id': []},
                          4: {'$': [],
                              '(': [('shift', 4)],
                              ')': [],
                              '*': [],
                              '+': [],
                              'id': [('shift', 5)]},
                          5: {'$': [('reduce', ('F', ('id',)))],
                              '(': [],
                              ')': [('reduce', ('F', ('id',)))],
                              '*': [('reduce', ('F', ('id',)))],
                              '+': [('reduce', ('F', ('id',)))],
                              'id': []},
                          6: {'$': [],
                              '(': [('shift', 4)],
                              ')': [],
                              '*': [],
                              '+': [],
                              'id': [('shift', 5)]},
                          7: {'$': [],
                              '(': [('shift', 4)],
                              ')': [],
                              '*': [],
                              '+': [],
                              'id': [('shift', 5)]},
                          8: {'$': [],
                              '(': [],
                              ')': [('shift', 11)],
                              '*': [],
                              '+': [('shift', 6)],
                              'id': []},
                          9: {'$': [('reduce', ('E', ('E', '+', 'T')))],
                              '(': [],
                              ')': [('reduce', ('E', ('E', '+', 'T')))],
                              '*': [('shift', 7)],
                              '+': [('reduce', ('E', ('E', '+', 'T')))],
                              'id': []},
                          10: {'$': [('reduce', ('T', ('T', '*', 'F')))],
                               '(': [],
                               ')': [('reduce', ('T', ('T', '*', 'F')))],
                               '*': [('reduce', ('T', ('T', '*', 'F')))],
                               '+': [('reduce', ('T', ('T', '*', 'F')))],
                               'id': []},
                          11: {'$': [('reduce', ('F', ('(', 'E', ')')))],
                               '(': [],
                               ')': [('reduce', ('F', ('(', 'E', ')')))],
                               '*': [('reduce', ('F', ('(', 'E', ')')))],
                               '+': [('reduce', ('F', ('(', 'E', ')')))],
                               'id': []}})
        self.assertEqual(goto_tb,
                         {0: {'E': [1], "E'": [], 'F': [3], 'T': [2]},
                          1: {'E': [], "E'": [], 'F': [], 'T': []},
                          2: {'E': [], "E'": [], 'F': [], 'T': []},
                          3: {'E': [], "E'": [], 'F': [], 'T': []},
                          4: {'E': [8], "E'": [], 'F': [3], 'T': [2]},
                          5: {'E': [], "E'": [], 'F': [], 'T': []},
                          6: {'E': [], "E'": [], 'F': [3], 'T': [9]},
                          7: {'E': [], "E'": [], 'F': [10], 'T': []},
                          8: {'E': [], "E'": [], 'F': [], 'T': []},
                          9: {'E': [], "E'": [], 'F': [], 'T': []},
                          10: {'E': [], "E'": [], 'F': [], 'T': []},
                          11: {'E': [], "E'": [], 'F': [], 'T': []}})
if __name__ == '__main__':
    unittest.main()
